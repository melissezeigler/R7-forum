Questions for Lesson 6

1. When you enable CRUD operations on a table in the database, you need to add four things
to your Rails application.  When you generate a scaffold, all four are created. What are they?
They are the migration, model, controller, and route.



2. When you specify a route in config/routes.rb, you need to include certain information.  What
must be included? In addition, you may specify an additional parameter to create a variable
that describes the route.  How do you do that? What variable is created?
HTTP (get, post, patch, and delete), path(/), controller action(user#index), optional params(example: as:users), and created variable(example: user_path).


3. What does the Rails db:migrate command do?
The command runs the pending migrations, which also changes to the database schema in the migration files.


4. What file do you look at to see the current database schema?
db/schema.rb

5. What command shows the routes?
bin/rails routes

6. How can you start the Rails console? How can you do CRUD operations from the console?
Use 'bin/rails console' to start the Rails console. Create by 'user.create()'; read by 'user.all/find()'; update by adding user = 'user.find()/user.update()'; 
and delete by 'user.find().destroy'.

7. What statements are in erb files that make them different from html files?  What are the
two kinds of special statements, and how are they marked in the erb file? Where are they executed?
The two statements are '<%= ... %>' for outputs the result and '<% ... $>' executes the Ruby code without outputting the result. 
These executed on the server side before the page is sent to the browser.

8. Consider this statement: @forum = Forum.new().  Why is Forum capitalized?  Why is @forum not
capitalized? Why is the @ used?
Forum is capitalized because it's a class name. @forum is not capitalized because it's an instance variable. 
'@' symnol is an instance var, which can be accessed within the instance of the class.


9. Consider these statements:

@forum = Forum.new(...)  
@forum =Forum.create(...)  
@forum.save(...)  

What is the difference between Forum.new() and Forum.create()?  Why can't you do Forum.save(...)?
@forum = Forum.new(...) - Does not save to the database.
@forum =Forum.create(...) - Saves it to the database in one step.
@forum.save(...) - It's an instance method, not a class method.

10. In the forums controller, you have a method called show:

  def show
  end

This is an action method.  It is an action method for only one reason: There is a route
that points to it.  But there's nothing in the method!  It will do the right things
because the default behavior does what is needed.  What does the default behavior
do?  How does it know which forum to show?  Whenever you have an action method, there
is a hash called params that is passed to that method.  And, in this case, the params
hash has a value, params[:id].  What is the value for this element of the hash? How
did it get there?

The 'show' method is to render the 'show' view for the specific resource. Forum shows because of the 'params[:id]' value.
'params[:id]' value of the element is the ID of the forum to be shown and passed by the route. 
And, then it gets there from the URL defined in the routes file(example: '/forums/:id').



